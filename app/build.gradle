import com.phone.versionplugin.BuildVersions

plugins {
    //body app（不可单独运行）
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    //ARouter需要用到
    id 'kotlin-kapt'
    id 'com.phone.versionplugin'
}
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.huawei.agconnect'Xz&150120


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

android {
    compileSdk BuildVersions.compileSdk

    defaultConfig {
        applicationId "com.phone.rxjava2andretrofit2"
        minSdk BuildVersions.minSdk
        targetSdk BuildVersions.targetSdk
        versionCode BuildVersions.versionCode
        versionName BuildVersions.versionName

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//            }
//        }

        ndk {
            //手机项目只要选择这两种cpu类型的.so库就可以了，不用添加'x86', 'x86_64', 'mips', 'mips64'的.so库
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: "com.phone.rxjava2andretrofit2",
                JPUSH_APPKEY : "8e2573e36e6e9c4d624d29d4", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

    }

    //android 模块下开启DataBinding（必须添加，即使此module没有用到也要添加）
    dataBinding {
        enabled = true
    }

    //开启Java1_8 能够使用lambda表达式
    compileOptions {
        sourceCompatibility "1.8"
        targetCompatibility "1.8"
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        release {
            storeFile file('../rxjava2_and_retrofit2_release.keystore')
            storePassword 'Xz&150120'
            keyPassword 'Xz&150120'
            keyAlias 'rxjava2_and_retrofit2'
        }
    }

    buildTypes {
        release {
            //java代码中引用的定义形式
            buildConfigField "Boolean", "IS_MODULE", "${isModule}"
            buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            //java代码中引用的定义形式
            buildConfigField "Boolean", "IS_MODULE", "${isModule}"
            buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    configurations {
        cleanedAnnotations
        compile.exclude group: 'org.jetbrains', module: 'annotations'
    }

    ndkVersion '16.1.4479499'
//    externalNativeBuild {
//        cmake {
//            path file('src/main/cpp/CMakeLists.txt')
//            version '3.10.2'
//        }
//    }

    //给Module 内的资源名增加前缀, 避免资源名冲突
    resourcePrefix "app_"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    if (isModule.toBoolean()) {
        //可独立运行的app
        implementation project(path: ':module_main')
    } else {
        //被依赖的library
        implementation project(path: ':module_main')
        implementation project(path: ':module_home')
        implementation project(path: ':module_project')
        implementation project(path: ':module_square')
        implementation project(path: ':module_resource')
        implementation project(path: ':module_mine')
    }

}
