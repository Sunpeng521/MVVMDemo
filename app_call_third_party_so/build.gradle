import com.phone.versionplugin.BuildVersions

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.phone.versionplugin'
}

android {
    compileSdk BuildVersions.targetSdk

    defaultConfig {
        applicationId "com.phone.app_call_third_party_so"
        minSdk BuildVersions.minSdk
        targetSdk BuildVersions.targetSdk
        versionCode BuildVersions.versionCode
        versionName BuildVersions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"

        ndk {
            //手机项目只要选择这两种cpu类型的.so库就可以了，不用添加'x86', 'x86_64', 'mips', 'mips64'的.so库
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.0-alpha01'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    buildTypes {
        release {
            //java代码中引用的定义形式
            buildConfigField "Boolean", "IS_MODULE", "${isModule}"
            buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            //java代码中引用的定义形式
            buildConfigField "Boolean", "IS_MODULE", "${isModule}"
            buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //给Module 内的资源名增加前缀, 避免资源名冲突
    resourcePrefix "call_so_"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.core:core-ktx:1.8.0"
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.7.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

}